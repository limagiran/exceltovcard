package com.limagiran.exceltovcard.view;

import com.limagiran.exceltovcard.control.VCard;
import com.limagiran.exceltovcard.control.VCard.EnumTypeName;
import static com.limagiran.exceltovcard.i18n.I18N.*;
import com.limagiran.exceltovcard.util.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.ResourceBundle;
import java.util.stream.IntStream;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import jxl.read.biff.BiffException;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author Vinicius Silva
 */
public class View extends JFrame {

    private File excelFile;
    private int lastComboBox = 0;
    private List<List<String>> contacts = new ArrayList<>();

    /**
     * Creates new form Exportar
     */
    public View() {
        initComponents();
        init();
    }

    /**
     * Configurações iniciais
     */
    private void init() {
        setIconImage(new ImageIcon(getClass().getResource("/com/limagiran/exceltovcard/icon.png")).getImage());
        jTableContacts.getTableHeader().setVisible(false);
        final Rectangle rect = jPanelComboBox.getBounds();
        jScrollPaneTable.getVerticalScrollBar().addComponentListener(new ComponentAdapter() {
            @Override
            public void componentHidden(ComponentEvent e) {
                setJPanelComboBox(rect.x, rect.y, rect.width, rect.height);
            }

            @Override
            public void componentShown(ComponentEvent e) {
                int diff = jScrollPaneTable.getVerticalScrollBar().getPreferredSize().width;
                setJPanelComboBox(rect.x, rect.y, (rect.width - diff), rect.height);
            }

            private void setJPanelComboBox(int x, int y, int w, int h) {
                jPanel.add(jPanelComboBox, new AbsoluteConstraints(x, y, w, h), 0);
                jPanel.revalidate();
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new JPanel();
        jButtonSelecionarExcel = new JButton();
        jButtonExportarVCard = new JButton();
        jButtonHelp = new JButton();
        jLabelTitulo = new JLabel();
        jPanelComboBox = new JPanel();
        empty = new JLabel();
        jScrollPaneTable = new JScrollPane();
        jTableContacts = new JTable();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(840, 620));
        setPreferredSize(new Dimension(840, 620));
        setResizable(false);
        getContentPane().setLayout(new AbsoluteLayout());

        jPanel.setLayout(new AbsoluteLayout());

        jButtonSelecionarExcel.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        ResourceBundle bundle = ResourceBundle.getBundle("com/limagiran/exceltovcard/i18n/Bundle"); // NOI18N
        jButtonSelecionarExcel.setText(bundle.getString("View.jButtonSelecionarExcel.text")); // NOI18N
        jButtonSelecionarExcel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonSelecionarExcelActionPerformed(evt);
            }
        });
        jPanel.add(jButtonSelecionarExcel, new AbsoluteConstraints(170, 60, 220, 40));

        jButtonExportarVCard.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jButtonExportarVCard.setText(bundle.getString("View.jButtonExportarVCard.text")); // NOI18N
        jButtonExportarVCard.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonExportarVCardActionPerformed(evt);
            }
        });
        jPanel.add(jButtonExportarVCard, new AbsoluteConstraints(450, 60, 220, 40));

        jButtonHelp.setFont(new Font("Tahoma", 1, 24)); // NOI18N
        jButtonHelp.setForeground(new Color(153, 153, 153));
        jButtonHelp.setText(bundle.getString("View.jButtonHelp.text")); // NOI18N
        jButtonHelp.setMargin(new Insets(2, 10, 2, 10));
        jButtonHelp.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });
        jPanel.add(jButtonHelp, new AbsoluteConstraints(760, 20, -1, -1));

        jLabelTitulo.setFont(new Font("Tahoma", 0, 36)); // NOI18N
        jLabelTitulo.setHorizontalAlignment(SwingConstants.CENTER);
        jLabelTitulo.setText(bundle.getString("View.jLabelTitulo.text")); // NOI18N
        jPanel.add(jLabelTitulo, new AbsoluteConstraints(10, 10, 820, 50));

        jPanelComboBox.setLayout(new GridLayout(1, 0));
        jPanel.add(jPanelComboBox, new AbsoluteConstraints(10, 120, 820, 30));

        empty.setText(bundle.getString("View.empty.text")); // NOI18N
        empty.setOpaque(true);
        jPanel.add(empty, new AbsoluteConstraints(800, 110, 30, 40));

        jScrollPaneTable.setBorder(null);

        jTableContacts.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableContacts.setRowHeight(25);
        jTableContacts.getTableHeader().setResizingAllowed(false);
        jTableContacts.getTableHeader().setReorderingAllowed(false);
        jScrollPaneTable.setViewportView(jTableContacts);

        jPanel.add(jScrollPaneTable, new AbsoluteConstraints(10, 130, 820, 450));

        getContentPane().add(jPanel, new AbsoluteConstraints(0, 0, 840, 590));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelecionarExcelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonSelecionarExcelActionPerformed
        selectExcelFile();
    }//GEN-LAST:event_jButtonSelecionarExcelActionPerformed

    private void jButtonExportarVCardActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonExportarVCardActionPerformed
        export();
    }//GEN-LAST:event_jButtonExportarVCardActionPerformed

    private void jButtonHelpActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
        JOptionPane.showMessageDialog(null,
                "Carregar um arquivo do excel com a primeira aba (pasta de trabalho)\n"
                + "preenchida com os dados que serão inclusos no vCard.\n"
                + "Caso haja título nas colunas (nome, telefone, endereço), retire,\n"
                + "pois os contatos serão criados a partir da PRIMEIRA LINHA.\n"
                + "Depois de criado, abra o arquivo no celular ou utilize a opção \"Importar\" \n"
                + "nas configurações de \"Contato\" do celular.");
    }//GEN-LAST:event_jButtonHelpActionPerformed

    /**
     * Cria e exibe a janela principal
     */
    public static void main() {
        SwingUtilities.invokeLater(() -> {
            new View().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel empty;
    private JButton jButtonExportarVCard;
    private JButton jButtonHelp;
    private JButton jButtonSelecionarExcel;
    private JLabel jLabelTitulo;
    private JPanel jPanel;
    private JPanel jPanelComboBox;
    private JScrollPane jScrollPaneTable;
    private JTable jTableContacts;
    // End of variables declaration//GEN-END:variables

    /**
     * Selecionar arquivo do excel
     */
    private void selectExcelFile() {
        excelFile = Dir.windowsFile(VIEW_SELECT_EXCEL_FILE.val(), null,
                VIEW_SELECT_EXCEL_FILE_DESCRIPT.val(), ".xls");
        if (excelFile != null) {
            loadExcelFile();
        }
    }

    /**
     * Carrega e exibe na tabela o conteúdo do arquivo Excel selecionado
     */
    private void loadExcelFile() {
        try {
            contacts = Excel.getData(excelFile);
            fillTable();
        } catch (IOException | BiffException ex) {
            JOptionPane.showMessageDialog(null, VIEW_EXCEL_FILE_ERROR + "\n" + ex);
        }
        jPanelComboBox.revalidate();
    }

    /**
     * Preencher a tabela com os contatos vCard
     */
    private void fillTable() {
        int rows = contacts.size();
        int cols = (contacts.isEmpty() ? 0 : contacts.get(0).size());

        jTableContacts.setModel(new DefaultTableModel(new Object[rows][cols], new String[cols]) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        jPanelComboBox.removeAll();
        for (int row = 0; row < contacts.size(); row++) {
            for (int col = 0; col < contacts.get(row).size(); col++) {
                jTableContacts.setValueAt(contacts.get(row).get(col), row, col);
            }
        }
        IntStream.range(0, cols).forEach((i) -> {
            JComboBox combo = new JComboBox(EnumTypeName.values());
            combo.addItemListener(comboBoxItemListener());
            combo.setSelectedIndex(((i < (EnumTypeName.values().length - 1)) ? (i + 1) : 0));
            jPanelComboBox.add(combo);
        });
        if (jPanelComboBox.getComponentCount() == 0) {
            jPanelComboBox.add(new JLabel(VIEW_EMPTY_FILE.val(), SwingConstants.CENTER));
        }
    }

    /**
     * Configura um ItemListener para evitar preenchimento duplicado dos
     * atributos NOME e ENDEREÇO
     *
     * @return ItemListener configurado
     */
    private ItemListener comboBoxItemListener() {
        return (ItemEvent evt) -> {
            if (evt.getStateChange() == ItemEvent.DESELECTED) {
                lastComboBox = Arrays.asList(EnumTypeName.values()).indexOf(evt.getItem());
            } else if ((evt.getStateChange() == ItemEvent.SELECTED)
                    && ((evt.getItem().equals(EnumTypeName.NAME)
                    || (evt.getItem().equals(EnumTypeName.ADDRESS))))
                    && (itemIsSelected((JComboBox) evt.getSource(), evt.getItem()))) {
                ((JComboBox) evt.getSource()).setSelectedIndex(lastComboBox);
            }
        };
    }

    /**
     * Verifica se o item já está selecionado em algum outro JComboBox
     *
     * @param cmbbx JComboBox alterado
     * @param item item selecionado
     * @return {@code true} para sim. {@code false} o contrário
     */
    private boolean itemIsSelected(JComboBox cmbbx, Object item) {
        return Arrays.asList(jPanelComboBox.getComponents()).stream()
                .anyMatch((c) -> ((!cmbbx.equals(c))
                        && ((JComboBox) c).getSelectedItem().equals(item)));
    }

    /**
     * Salva o arquivo vCard em disco
     */
    private void export() {
        if (validateContacts()) {
            StringBuilder export = new StringBuilder();
            for (int row = 0; row < jTableContacts.getRowCount(); row++) {
                VCard vCard = new VCard();
                for (int col = 0; col < jTableContacts.getColumnCount(); col++) {
                    Object obj = ((JComboBox) jPanelComboBox.getComponent(col)).getSelectedItem();
                    vCard.put(jTableContacts.getValueAt(row, col).toString(), (EnumTypeName) obj);
                }
                export.append(vCard.getVCard());
            }
            save(export.toString());
        }
    }

    /**
     * Verifica se os contatos foram carregados e contém o atributo NOME
     * selecionado em um JComboBox
     *
     * @return {@code true} para válido. {@code false} o contrário
     */
    private boolean validateContacts() {
        if (contacts.isEmpty()) {
            JOptionPane.showMessageDialog(null, VIEW_SELECT_EXCEL_FILE);
            return false;
        }
        long cont = Arrays.asList(jPanelComboBox.getComponents()).stream()
                .filter((c) -> ((JComboBox) c).getSelectedItem().equals(EnumTypeName.NAME)).count();
        if (cont != 1) {
            JOptionPane.showMessageDialog(null, cont == 0
                    ? VIEW_NAME_REQUIRED : VIEW_ONLY_ONE_NAME);
            return false;
        }
        return true;
    }

    /**
     * Salva o arquivo vCard em disco
     *
     * @param vCard conteúdo do arquivo vCard
     */
    private void save(String vCard) {
        File file = Dir.windowsSave(VIEW_SAVE_FILE.val(), "vCard.vcf", null,
                VIEW_SAVE_FILE_DESCRIPT.val(), ".vcf");
        if (file != null) {
            try {
                writeFile(file, vCard);
                JOptionPane.showMessageDialog(null, VIEW_GENERATE_VCARD_SUCESS);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, VIEW_GENERATE_VCARD_FAILED
                        + "\n" + ex.getMessage());
            }
        }
    }

    /**
     * Salva o conteúdo do arquivo no caminho passado como parâmetro
     *
     * @param file local onde será gravado (com nome e extensão)
     * @param value conteúdo a ser salvo em arquivo
     * @throws java.lang.Exception erro ao salvar arquivo
     */
    public static void writeFile(File file, String value) throws Exception {
        try (FileOutputStream fos = new FileOutputStream(file);
                OutputStreamWriter osw = new OutputStreamWriter(fos, "UTF-8");
                BufferedWriter bw = new BufferedWriter(osw);) {
            String[] buff = value.split("\n");
            bw.write(buff[0]);
            for (int indice = 1; indice < buff.length; indice++) {
                bw.newLine();
                bw.write(buff[indice]);
            }
            bw.close();
        }
    }
}
